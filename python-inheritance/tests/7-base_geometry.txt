# doctest file for testing the `BaseGeometry` class.

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> base_geometry = BaseGeometry()

if Empty `area()`:
>>> base_geometry.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

if empty or missing argument:
>>> base_geometry.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> base_geometry.integer_validator("age")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

if `None` value:
>>> base_geometry.integer_validator("age", None)
Traceback (most recent call last):
...
TypeError: age must be an integer

if used with correct argument:

>>> base_geometry.integer_validator("age", 21)

if 0 or negative value:
>>> base_geometry.integer_validator("age", 0)
Traceback (most recent call last):
...
ValueError: age must be greater than 0

>>> base_geometry.integer_validator("age", -21)
Traceback (most recent call last):
...
ValueError: age must be greater than 0

if `base_geometry` module with non-integer value:

>>> base_geometry.integer_validator("age", "21")
Traceback (most recent call last):
...
TypeError: age must be an integer

>>> base_geometry.integer_validator("age", [21])
Traceback (most recent call last):
...
TypeError: age must be an integer

>>> base_geometry.integer_validator("age", (21, 40))
Traceback (most recent call last):
...
TypeError: age must be an integer

>>> base_geometry.integer_validator("age", {21, 40})
Traceback (most recent call last):
...
TypeError: age must be an integer

>>> base_geometry.integer_validator("age", True)
Traceback (most recent call last):
...
TypeError: age must be an integer